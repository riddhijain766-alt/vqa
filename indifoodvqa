# 1. Libraries
import json
from datasets import Dataset
import evaluate
from transformers import AutoTokenizer, AutoModelForCausalLM, TrainingArguments, Trainer
import torch
from peft import get_peft_model, LoraConfig, TaskType

# 2. Data Loading & Formatting
def load_and_format(path):
    with open(path, "r", encoding="utf-8") as f:
        examples = json.load(f)
    data = []
    for sample in examples:
        prompt = (
            f"Question: {sample['question']}\n"
            f"Choices:\n" +
            "\n".join(sample["answer_choices"])
        )
        answer_letter = sample["correct_answer"].split('.')[0].strip()
        target = f"The answer is {answer_letter}.\n{sample['reason']}"
        data.append({"prompt": prompt, "target": target})
    return data

data = load_and_format("train_vqa.json")

# Optional: Split into train/validation
from sklearn.model_selection import train_test_split
train_data, eval_data = train_test_split(data, test_size=0.1, random_state=42)
train_ds = Dataset.from_list(train_data)
eval_ds = Dataset.from_list(eval_data)

# 3. Tokenizer & Model Setup
model_id = "llama/llama-3.1-8b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_id, use_fast=False)
tokenizer.pad_token = tokenizer.eos_token
model = AutoModelForCausalLM.from_pretrained(model_id, load_in_8bit=True, torch_dtype=torch.bfloat16)
lora_config = LoraConfig(
    r=16,
    lora_alpha=32,
    target_modules=["q_proj", "v_proj"],  # Model specific, refer to docs.
    lora_dropout=0.05,
    bias="none",
    task_type=TaskType.CAUSAL_LM
)

model = get_peft_model(model, lora_config)

# 4. Dataset Tokenization
def preprocess(example):
    source = tokenizer(example["prompt"], truncation=True, max_length=512)
    target = tokenizer(example["target"], truncation=True, max_length=128)
    # For causal LM: concatenate prompt+target as input, with labels only for target
    input_ids = source["input_ids"] + target["input_ids"]
    labels = [-100]*len(source["input_ids"]) + target["input_ids"]
    attention_mask = source["attention_mask"] + target["attention_mask"]
    return {"input_ids": input_ids, "labels": labels, "attention_mask": attention_mask}

train_ds = train_ds.map(preprocess, remove_columns=["prompt", "target"])
eval_ds = eval_ds.map(preprocess, remove_columns=["prompt", "target"])

# 5. Training Arguments
training_args = TrainingArguments(
    output_dir="./llama3_vqa_ckpt",
    bf16=True,
    per_device_train_batch_size=2,
    per_device_eval_batch_size=1,
    gradient_accumulation_steps=8,
    num_train_epochs=3,
    learning_rate=2e-5,
    weight_decay=0.0,
    warmup_ratio=0.03,
    lr_scheduler_type="cosine",
    # evaluation_strategy="epoch",
    logging_steps=50,
    save_total_limit=2,
    report_to="none",
)

# 6. Trainer Setup
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=eval_ds,
    tokenizer=tokenizer,
)

# 7. Training Loop
trainer.train()

# 8. Basic Inference/Evaluation
def extract_answer_and_reason(text):
    lines = text.split('\n')
    ans = lines[0] if lines else ''
    reason = '\n'.join(lines[1:]) if len(lines) > 1 else ''
    return ans, reason

metric = load_metric("accuracy")
from sentence_transformers import SentenceTransformer, util
sbert = SentenceTransformer("all-MiniLM-L6-v2")

results = []
for ex in eval_data:
    inputs = tokenizer(ex["prompt"], return_tensors="pt", truncation=True).to(model.device)
    output = model.generate(**inputs, max_new_tokens=50)
    pred = tokenizer.decode(output, skip_special_tokens=True)
    pred_ans, pred_reason = extract_answer_and_reason(pred)
    gold_ans = f"The answer is {ex['target'].split()}." # "The answer is X."
    # Top-1 accuracy
    results.append(int(pred_ans.strip() == gold_ans.strip()))
    # SBERT similarity
    sim = util.cos_sim(
        sbert.encode(pred_reason, convert_to_tensor=True),
        sbert.encode(ex["target"].split('\n'), convert_to_tensor=True)
    ).item()
    print(f"Prompt: {ex['prompt']}\nGold: {ex['target']}\nPred: {pred}\nAns Correct: {pred_ans.strip() == gold_ans.strip()}\nSBERT Sim: {sim:.3f}\n---")

print(f"Top-1 Accuracy: {sum(results)/len(results):.3f}")

# You can add further metrics (Rouge, BLEU, Meteor) as neededâ€”Hugging Face datasets supports these.

